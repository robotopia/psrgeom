.\" Copyright 2017 Sam McSweeney (sammy.mcsweeney@gmail.com)
.TH BFIELD 3 2017-11-28 "" "Pulsar Geometry"
.SH NAME
Bfield \- calculate the magnetic field around a pulsar
.SH SYNOPSIS
.nf
.B #include <psrgeom.h>
.PP
.BI "void Bfield(point *" x ", pulsar *" psr ", point *" B ");"
.fi
.PP
.SH DESCRIPTION
The
.BR Bfield ()
function calculates the magnetic field \fIB\fP at the point \fIx\fP
around pulsar \fIpsr\fP.
.PP
The function assumes only that the Cartesian coordinates of \fIx\fP contain
meaningful values. Similarly, \fIpsr\fP is assumed to have meaningful values
of \fIal\fP, \fIrL\fP, and \fIrL2\fP.
.PP
Upon return, only the Cartesian values in \fIB\fP are set, as well as the
radius, r. The Cartesian points correspond to a unit vector which is parallel
to the magnetic field at point \fIx\fP. The radius, \fIB.r\fP, is the
magnetic field strength at point \fIx\fP normalised to the magnitude of the
dipole moment.
.SH RETURN VALUE
The
.BR Bfield ()
function return no value.
.SH EXAMPLE
.EX
#include <psrgeom.h>

int main(int argc, char *argv[])
{
    double P = 1.0;
    double r = 1.0e4;

    angle al, ze;
    set_angle_deg( &al, 45.0 );
    set_angle_deg( &ze, 50.0 );

    pulsar psr;
    set_pulsar( &psr, NULL, NULL, P, r, &al, &ze );

    point x, B;
    set_point_xyz( &x, psr.rL, 0.0, 0.0, POINT_SET_ALL );

    Bfield( &x, &psr, &B );

    /* Now, B.x[0], B.x[1], B.x[2], and B.r are all defined */

    exit(EXIT_SUCCESS);
}
.EE
